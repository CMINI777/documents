(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{189:function(n,t,e){"use strict";e.r(t);var v=e(0),_=Object(v.a)({},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"复杂度分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析","aria-hidden":"true"}},[n._v("#")]),n._v(" 复杂度分析")]),n._v(" "),e("p",[n._v("数据结构与算法解决的是让代码运行更快更省存储空间的问题。那如何来衡量代码的执行效率呢？")]),n._v(" "),e("p",[n._v("这里就需要时间、空间复杂度分析，那么这里需要引入大 O 复杂度表示法：T(n)=O(f(n))。")]),n._v(" "),e("p",[n._v("T(n)表示代码执行的时间；n 表示数据规模的大小。f(n) 表示每行代码执行的次数总和。")]),n._v(" "),e("p",[n._v("公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。")]),n._v(" "),e("p",[n._v("多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。包括，")]),n._v(" "),e("p",[n._v("O(1)（常数阶）、O(logn)（对数阶）、O(n)（线性阶）、O(nlogn)（线性对数阶）、O(n^2)（平方阶）、O(n^3)（立方阶）")]),n._v(" "),e("p",[n._v("非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。包括，")]),n._v(" "),e("p",[n._v("O(2^n)（指数阶）、O(n!)（阶乘阶）")])])},[],!1,null,null,null);t.default=_.exports}}]);